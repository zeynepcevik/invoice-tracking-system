/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package musteritakip;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * @file MusteriTakip
 * @description Bu programda, müşteri fatura bilgilerini içeren bir dosyadan
 * veri okunur ve öncelikli bir kuyruğa müşteri eklenir. Ardından, kullanıcı
 * tarafından belirtilen öncelik değerine göre kuyruktan müşteri çıkarılır ve
 * müşteriler listelenir. Ayrıca, fatura türüne göre müşterileri filtrelenerek
 * çıkış sıraları ve toplam süre hesaplanır.
 * @assignment 1. Ödev
 * @date 24.12.2023
 * @author Zeynep Çevik zeynep.cevik@stu.fsm.edu.tr
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    Node front, rear = null;
    int size = 0;

    File selectedFile;

    public NewJFrame() {

        initComponents();
        jList1.setModel(listModel);

        setLocationRelativeTo(null);

        jScrollPane2.setViewportView(jList2);
        jList2.setModel(listModel2);
        jScrollPane3.setViewportView(jList3);
        jList3.setModel(listModel3);
        jScrollPane4.setViewportView(jList4);
        jList4.setModel(listModel4);

        //Queue customerQueue = new Queue();
    }
    private DefaultListModel<String> listModel = new DefaultListModel<>();
    private DefaultListModel<String> listModel2 = new DefaultListModel<>();
    private DefaultListModel<String> listModel3 = new DefaultListModel<>();
    private DefaultListModel<String> listModel4 = new DefaultListModel<>();

    void enqueue(String AdSoyad, String FaturaTipi, Double FaturaMiktari, int oncelik, int zaman) {

        Node newNode = new Node(AdSoyad, FaturaTipi, FaturaMiktari, oncelik, zaman, null);

        if (front == null || oncelik < front.oncelik) {
            // Kuyruk boşsa veya eklenen elemanın önceliği en yüksekse, yeni elemanı başa ekler.
            newNode.next = front;
            front = newNode;
        } else {
            Node current = front;

            // Öncelik sırasına uygun konuma kadar ilerler.
            while (current.next != null && oncelik > current.next.oncelik) {
                current = current.next;
            }

            // Eğer öncelik aynıysa, öncelik grubunun sonuna ekler.
            while (current.next != null && oncelik == current.next.oncelik) {
                current = current.next;
            }

            // Yeni elemanı uygun konuma ekler.
            newNode.next = current.next;
            current.next = newNode;
        }

        size++;
    }

    // Öncelikli kuyruktan eleman çıkarmak için
    // Kuyruktan bir müşteri çıkarır.
    Node dequeue() {
        // Eğer kuyruk boşsa, removedNode değeri null olarak döner.
        Node removedNode = null;
        if (front == null) {
            System.out.println("Çıkarılacak eleman yok");
        } else {
            // Çıkartılan müşteri, front  ile belirtilir ve kuyruk boyutu bir azaltılır.
            removedNode = front;
            front = front.next;
            size--;
        }
        return removedNode;
    }

// Kuyruktaki eleman sayısını döndürür.
    int getsize() {
        return size;
    }

// Kuyruğun içindeki müşterileri ekrana basar.
// Her bir müşteri, AdSoyad ve öncelik bilgisi ile birlikte gösterilir.
    void print() {
        Node temp = front;
        while (temp != null) {
            System.out.print(temp.AdSoyad + "(Öncelik: " + temp.oncelik + ") -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList4 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        readFile = new javax.swing.JButton();
        callCustomer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        totalTime = new javax.swing.JButton();
        enterPriority = new javax.swing.JButton();
        totPriortyTime = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        totalBill = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        enterBill = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 255, 153));

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));

        jScrollPane4.setViewportView(jList4);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Müşteriler Listesi:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Kuyruktan Çıkan Müşteriler:");

        readFile.setBackground(new java.awt.Color(204, 204, 204));
        readFile.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        readFile.setText("Dosya Oku");
        readFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readFileActionPerformed(evt);
            }
        });

        callCustomer.setBackground(new java.awt.Color(204, 204, 204));
        callCustomer.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        callCustomer.setText("Müşteri Çağır");
        callCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callCustomerActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        jScrollPane2.setBackground(new java.awt.Color(204, 255, 204));

        jScrollPane2.setViewportView(jList2);

        jButton1.setBackground(new java.awt.Color(204, 204, 204));
        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Önceliğe Göre Listele");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Verdana", 2, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("FATURA TAKİP SİSTEMİ");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Öncelik Sırasına Göre Müşteriler:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(readFile, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(callCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(440, 440, 440))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(readFile, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(callCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(447, 447, 447))))
        );

        jPanel2.setBackground(new java.awt.Color(153, 204, 255));

        totalTime.setBackground(new java.awt.Color(204, 204, 204));
        totalTime.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        totalTime.setText("Toplam Süre:");
        totalTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalTimeActionPerformed(evt);
            }
        });

        enterPriority.setBackground(new java.awt.Color(204, 204, 204));
        enterPriority.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        enterPriority.setText("Öncelik Gir:");
        enterPriority.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterPriorityActionPerformed(evt);
            }
        });

        totPriortyTime.setBackground(new java.awt.Color(204, 204, 204));
        totPriortyTime.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        totPriortyTime.setText("Öncelik Toplam Süre:");
        totPriortyTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totPriortyTimeActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(jList3);

        jLabel3.setBackground(new java.awt.Color(204, 204, 204));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Sonuç:");

        totalBill.setBackground(new java.awt.Color(204, 204, 204));
        totalBill.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        totalBill.setText("Toplam Fatura");
        totalBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalBillActionPerformed(evt);
            }
        });

        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jTextField2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        enterBill.setBackground(new java.awt.Color(204, 204, 204));
        enterBill.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        enterBill.setText("Fatura Gir:");
        enterBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterBillActionPerformed(evt);
            }
        });

        jTextField3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jButton2.setBackground(new java.awt.Color(255, 51, 102));
        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("Sıfırla");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(enterPriority, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(totPriortyTime, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                                .addComponent(enterBill, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(totalTime, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(totalBill, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                                .addComponent(jTextField1)
                                .addComponent(jTextField3)))))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalTime, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalBill, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(enterPriority, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addGap(3, 3, 3)))
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totPriortyTime, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterBill, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 538, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enterPriorityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterPriorityActionPerformed

        listModel3.clear(); // Mevcut listeyi temizler

        try {
            int targetPriority = Integer.parseInt(jTextField1.getText());

            // Öncelik değerini kontrol eder.
            if (targetPriority >= 1 && targetPriority <= 5) {
                // jList2 içindeki müşteri bilgilerini satır satır dolaşır.
                for (int i = 0; i < listModel2.getSize(); i++) {
                    String customerInfo = listModel2.getElementAt(i);

                    // Müşteri bilgilerini böler.
                    String[] parts = customerInfo.split("#");

                    // Öncelik bilgisini alır.
                    int customerPriority = Integer.parseInt(parts[3]);
                    int exitOrder = i + 1;

                    // Eğer öncelik bilgisi hedeflenen değere eşitse, müşteriyi jList3'e ekler.
                    if (customerPriority == targetPriority) {
                        listModel3.addElement(
                                parts[0] + "#"
                                + parts[1] + "#"
                                + parts[2] + "#"
                                + parts[3] + "#"
                                + parts[4]
                                + " Kuyruktan Çıkış Sırası: " + exitOrder
                        );
                    }
                }

                // Güncellenen modeli jList3'e ayarlar.
                jList3.setModel(listModel3);
            } else {
                // Hatalı öncelik değeri varsa hata mesajı gösterir.
                JOptionPane.showMessageDialog(this, "Hatalı öncelik değeri! Öncelik değeri 1 ile 5 arasında olmalıdır.", "Hata", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Hatalı öncelik değeri formatı! Lütfen bir sayı giriniz.", "Hata", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_enterPriorityActionPerformed

    private void readFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readFileActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(NewJFrame.this);

        // Kullanıcı dosya seçimi yapmazsa uyarı penceresi gösterir.
        if (result != JFileChooser.APPROVE_OPTION) {
            JOptionPane.showMessageDialog(NewJFrame.this, "Dosya seçilmedi!", "Uyarı", JOptionPane.WARNING_MESSAGE);
        } else {
            // Kullanıcı dosya seçimi yaparsa devam eder.
            File selectedFile = fileChooser.getSelectedFile();

            try ( BufferedReader reader = new BufferedReader(new FileReader(selectedFile))) {
                String line;

                // Dosyadan okunan her satırı işler.
                while ((line = reader.readLine()) != null) {
                    // Okunan her satırı JList'e ekler.
                    listModel.addElement(line);
                }
            } catch (IOException ioException) {
                // Dosya okuma sırasında hata oluşursa hatayı yazdırır.
                ioException.printStackTrace();
            }
        }


    }//GEN-LAST:event_readFileActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        listModel3.clear();
        // Dosya seçme penceresi oluşturur.
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(NewJFrame.this);

        // Kullanıcı dosya seçimini onaylarsa devam eder.
        if (result == JFileChooser.APPROVE_OPTION) {
            // Seçilen dosyayı al
            File selectedFile = fileChooser.getSelectedFile();

            try ( BufferedReader reader = new BufferedReader(new FileReader(selectedFile))) {
                String line;

                // Dosyadan okunan her satırı işler.
                while ((line = reader.readLine()) != null) {
                    // Satırı '#' karakterine göre ayır
                    String[] customerInfo = line.split("#");

                    // Eğer satırda 5 bilgi varsa devam et, aksi takdirde hata mesajını yazdırır.
                    if (customerInfo.length == 5) {
                        String adSoyad = customerInfo[0];
                        String faturaTipi = customerInfo[1];
                        double faturaMiktari = Double.parseDouble(customerInfo[2]);
                        int oncelik = Integer.parseInt(customerInfo[3]);
                        int zaman = Integer.parseInt(customerInfo[4]);

                        // Kuyruğa müşteriyi ekler.
                        enqueue(adSoyad, faturaTipi, faturaMiktari, oncelik, zaman);
                    } else {
                        System.out.println("Hatalı müşteri bilgisi: " + line);
                    }
                }

                // Kuyruktan müşteri çıkart ve JList'e ekler.
                while (size > 0) {
                    Node removedCustomer = dequeue();
                    listModel4.addElement(removedCustomer.AdSoyad + "#" + removedCustomer.FaturaTipi
                            + "#" + removedCustomer.FaturaMiktari + "#" + removedCustomer.oncelik
                            + "#" + removedCustomer.zaman);
                }
            } catch (IOException | NumberFormatException ex) {
                // Hata durumunda kullanıcıya bilgi verir.
                ex.printStackTrace();
            }
        } else {
            // Kullanıcı dosya seçimi yapmazsa uyarı mesajı gösterir.
            System.out.println("Dosya seçilmedi!");
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void callCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callCustomerActionPerformed
        // Kuyrukta işlem yapılabilecek bir müşteri varsa devam et
        if (listModel4.getSize() > 0) {
            // Kuyruktaki ilk müşteriyi alır.
            String firstElement = listModel4.getElementAt(0);

            // Alınan müşteriyi JList2'ye ekler.
            listModel2.addElement(firstElement);

            // JList2'nin modelini günceller.
            jList2.setModel(listModel2);

            // Kuyruktan ilk müşteriyi çıkarır.
            listModel4.remove(0);
        } else {
            // Kuyruk boşsa hata mesajı gösterir.
            JOptionPane.showMessageDialog(this, "Kuyruk boş, işlem yapılabilecek eleman yok", "Hata", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_callCustomerActionPerformed

    private void totalTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalTimeActionPerformed
        // sonuç:71
        listModel3.clear();

        // Eğer JList2'de işlem yapılabilecek bir müşteri varsa devam eder.
        if (listModel2.getSize() > 0) {
            int totalCallTime = 0;

            // JList2'deki her müşteri için toplam çağrı süresini hesaplar.
            for (int i = 0; i < listModel2.getSize(); i++) {
                // JList2'den müşteri bilgisini alır.
                String customerInfo = listModel2.getElementAt(i);

                // Müşteri bilgisini # karakterine göre ayırır.
                String[] parts = customerInfo.split("#");

                // Eğer müşteri bilgisi doğru formatta ise toplam süreye ekler.
                if (parts.length == 5) {
                    int zaman = Integer.parseInt(parts[4]);
                    totalCallTime += zaman;
                } else {
                    // Hatalı müşteri bilgisi varsa ekrana yazdırır.
                    System.out.println("Hatalı müşteri bilgisi: " + customerInfo);
                }
            }

            // Toplam çağrı süresini jList3'e ekleyerek gösterir.
            listModel3.addElement("Toplam Çağrı Süresi: " + totalCallTime + " dakika");

            // jList3'ü günceller.
            jList3.setModel(listModel3);
        } else {
            // JList2 boşsa hata mesajı gösterir.
            JOptionPane.showMessageDialog(this, "jList2 boş, hesaplama yapılabilecek eleman yok", "Hata", JOptionPane.ERROR_MESSAGE);
            // Kullanıcıya, JList2'nin boş olduğu bilgisini içeren isteğe bağlı bir mesaj gösterilebilir.
        }


    }//GEN-LAST:event_totalTimeActionPerformed

    private void totalBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalBillActionPerformed
        // sonuç: 2.554,38 

        listModel3.clear();

        // Eğer JList2'de işlem yapılabilecek bir müşteri varsa devam eder.
        if (listModel2.getSize() > 0) {
            double totalBillAmount = 0;

            // JList2'deki her müşteri için toplam fatura miktarını hesaplar.
            for (int i = 0; i < listModel2.getSize(); i++) {
                // JList2'den müşteri bilgisini al
                String customerInfo = listModel2.getElementAt(i);

                // Müşteri bilgisini # karakterine göre ayırır.
                String[] parts = customerInfo.split("#");

                // Eğer müşteri bilgisi doğru formatta ise toplam fatura miktarına ekler.
                if (parts.length == 5) {
                    double faturaMiktari = Double.parseDouble(parts[2]);
                    totalBillAmount += faturaMiktari;
                } else {
                    // Hatalı müşteri bilgisi varsa ekrana yazdırır.
                    System.out.println("Hatalı müşteri bilgisi: " + customerInfo);
                }
            }

            // Toplam fatura miktarını jList3'e ekleyerek gösterir.
            listModel3.addElement("Toplam Fatura Miktarı: " + totalBillAmount + " TL");

            // jList3'ü günceller.
            jList3.setModel(listModel3);
        } else {
            // Kuyruk boşsa hata mesajı göster ve kullanıcıyı bilgilendirir.
            System.out.println("Kuyruk boş, hesaplama yapılabilecek eleman yok.");
            // Kullanıcıya, JList2'nin boş olduğu bilgisini içeren isteğe bağlı bir mesaj gösterilebilir.
        }

    }//GEN-LAST:event_totalBillActionPerformed

    private void totPriortyTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totPriortyTimeActionPerformed

        listModel3.clear();

        try {
            // jTextField2'den öncelik değerini alır.
            int targetPriority = Integer.parseInt(jTextField2.getText());

            // Öncelik değerini kontrol eder.
            if (targetPriority >= 1 && targetPriority <= 5) {
                int totalPriorityTime = 0;

                // jList2 içindeki müşteri bilgilerini satır satır dolaşır.
                for (int i = 0; i < listModel2.getSize(); i++) {
                    // JList2'den müşteri bilgisini al
                    String customerInfo = listModel2.getElementAt(i);

                    // Müşteri bilgisini # karakterine göre ayırır.
                    String[] parts = customerInfo.split("#");

                    // Öncelik ve zaman bilgilerini alır.
                    int customerPriority = Integer.parseInt(parts[3]);
                    int customerTime = Integer.parseInt(parts[4]);

                    // Eğer öncelik bilgisi hedeflenen değere eşitse, toplam zamanı günceller.
                    if (customerPriority == targetPriority) {
                        totalPriorityTime += customerTime;
                    }
                }

                // JList3'e toplam zamanı ekleyerek gösterir.
                listModel3.addElement("Toplam Zaman (" + targetPriority + " Öncelik için): " + totalPriorityTime);

                // jList3'ü günceller.
                jList3.setModel(listModel3);
            } else {
                // Hatalı öncelik değeri varsa hata mesajı gösterir.
                System.out.println("Hatalı öncelik değeri: " + targetPriority);
                JOptionPane.showMessageDialog(this, "Hatalı öncelik değeri! Öncelik değeri 1 ile 5 arasında olmalıdır.", "Hata", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException ex) {

            JOptionPane.showMessageDialog(this, "Hatalı öncelik değeri formatı! Lütfen bir sayı giriniz.", "Hata", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_totPriortyTimeActionPerformed

    private void enterBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterBillActionPerformed
        try {
            // jTextField3'ten hedef fatura türünü alır.
            String targetBillType = jTextField3.getText().trim();

            // Hedef fatura türü boş değilse devam eder.
            if (!targetBillType.isEmpty()) {
                listModel3.clear(); // Mevcut listeyi temizler.

                // jList2 içindeki müşteri bilgilerini satır satır dolaşır.
                boolean foundMatch = false;

                for (int i = 0; i < listModel2.getSize(); i++) {
                    // jList2'den müşteri bilgisini al
                    String customerInfo = listModel2.getElementAt(i);

                    // Müşteri bilgisini # karakterine göre ayırır.
                    String[] parts = customerInfo.split("#");

                    // Fatura tipini kontrol eder.
                    if (parts[1].equalsIgnoreCase(targetBillType)) {
                        // Eğer hedeflenen fatura tipine sahipse, müşteri bilgisini listModel3'e ekler.
                        listModel3.addElement(parts[0] + "#" + parts[1] + "#" + parts[2] + "#" + parts[3] + "#" + parts[4] + "# Kuyruktan Çıkış Sırası: " + (i + 1));
                        foundMatch = true;
                    }
                }

                // Güncellenen modeli jList3'e ayarlar.
                jList3.setModel(listModel3);

                // Eğer hiçbir eşleşme bulunamazsa kullanıcıya uyarı mesajı gösterir.
                if (!foundMatch) {
                    JOptionPane.showMessageDialog(this, "Girilen fatura türü ile eşleşen müşteri bulunamadı. Lütfen doğru bir fatura türü giriniz.", "Uyarı", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                // Hedef fatura türü boşsa hata mesajı gösterir.
                System.out.println("Hatalı fatura türü: " + targetBillType);
                JOptionPane.showMessageDialog(this, "Hatalı fatura türü! Lütfen geçerli bir fatura türü giriniz.", "Hata", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            // Fatura türü girerken bir hata oluştuysa hata mesajı gösterir.
            JOptionPane.showMessageDialog(this, "Fatura türü girerken bir hata oluştu. Lütfen tekrar deneyin.", "Hata", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_enterBillActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultListModel<String> emptyListModel = new DefaultListModel<>();
        jList1.setModel(emptyListModel);
        jList2.setModel(emptyListModel);
        jList3.setModel(emptyListModel);
        jList4.setModel(emptyListModel);

        // jTextField1, jTextField2 ve jTextField3'ü sıfırla
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton callCustomer;
    private javax.swing.JButton enterBill;
    private javax.swing.JButton enterPriority;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JList<String> jList3;
    private javax.swing.JList<String> jList4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JButton readFile;
    private javax.swing.JButton totPriortyTime;
    private javax.swing.JButton totalBill;
    private javax.swing.JButton totalTime;
    // End of variables declaration//GEN-END:variables
}
